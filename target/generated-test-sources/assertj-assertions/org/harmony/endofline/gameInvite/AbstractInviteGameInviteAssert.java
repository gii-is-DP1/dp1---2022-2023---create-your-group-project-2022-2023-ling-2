package org.harmony.endofline.gameInvite;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.harmony.endofline.gameInvite.GameInvite;

/**
 * Abstract base class for {@link GameInvite} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractInviteGameInviteAssert<S extends AbstractInviteGameInviteAssert<S, A>, A extends GameInvite> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractInviteGameInviteAssert}</code> to make assertions on actual GameInvite.
   * @param actual the GameInvite we want to make assertions on.
   */
  protected AbstractInviteGameInviteAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual GameInvite's accepted is equal to the given one.
   * @param accepted the given accepted to compare the actual GameInvite's accepted to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's accepted is not equal to the given one.
   */
  public S hasAccepted(Boolean accepted) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting accepted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualAccepted = actual.getAccepted();
    if (!Objects.areEqual(actualAccepted, accepted)) {
      failWithMessage(assertjErrorMessage, actual, accepted, actualAccepted);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's canceled is equal to the given one.
   * @param canceled the given canceled to compare the actual GameInvite's canceled to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's canceled is not equal to the given one.
   */
  public S hasCanceled(Boolean canceled) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting canceled of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualCanceled = actual.getCanceled();
    if (!Objects.areEqual(actualCanceled, canceled)) {
      failWithMessage(assertjErrorMessage, actual, canceled, actualCanceled);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's pending is equal to the given one.
   * @param pending the given pending to compare the actual GameInvite's pending to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's pending is not equal to the given one.
   */
  public S hasPending(Boolean pending) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pending of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualPending = actual.getPending();
    if (!Objects.areEqual(actualPending, pending)) {
      failWithMessage(assertjErrorMessage, actual, pending, actualPending);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's receiver is equal to the given one.
   * @param receiver the given receiver to compare the actual GameInvite's receiver to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's receiver is not equal to the given one.
   */
  public S hasReceiver(org.harmony.endofline.user.User receiver) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting receiver of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualReceiver = actual.getReceiver();
    if (!Objects.areEqual(actualReceiver, receiver)) {
      failWithMessage(assertjErrorMessage, actual, receiver, actualReceiver);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's sender is equal to the given one.
   * @param sender the given sender to compare the actual GameInvite's sender to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's sender is not equal to the given one.
   */
  public S hasSender(org.harmony.endofline.user.User sender) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sender of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualSender = actual.getSender();
    if (!Objects.areEqual(actualSender, sender)) {
      failWithMessage(assertjErrorMessage, actual, sender, actualSender);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's type is equal to the given one.
   * @param type the given type to compare the actual GameInvite's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's type is not equal to the given one.
   */
  public S hasType(InviteType type) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    InviteType actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameInvite's userGame is equal to the given one.
   * @param userGame the given userGame to compare the actual GameInvite's userGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameInvite's userGame is not equal to the given one.
   */
  public S hasUserGame(org.harmony.endofline.userGame.UserGame userGame) {
    // check that actual GameInvite we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting userGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.userGame.UserGame actualUserGame = actual.getUserGame();
    if (!Objects.areEqual(actualUserGame, userGame)) {
      failWithMessage(assertjErrorMessage, actual, userGame, actualUserGame);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
