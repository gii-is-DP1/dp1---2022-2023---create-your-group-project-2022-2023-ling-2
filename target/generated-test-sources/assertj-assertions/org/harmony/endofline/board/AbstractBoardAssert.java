package org.harmony.endofline.board;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link Board} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBoardAssert<S extends AbstractBoardAssert<S, A>, A extends Board> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBoardAssert}</code> to make assertions on actual Board.
   * @param actual the Board we want to make assertions on.
   */
  protected AbstractBoardAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Board's height is equal to the given one.
   * @param height the given height to compare the actual Board's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Board's height is not equal to the given one.
   */
  public S hasHeight(int height) {
    // check that actual Board we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualHeight = actual.getHeight();
    if (actualHeight != height) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Board's width is equal to the given one.
   * @param width the given width to compare the actual Board's width to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Board's width is not equal to the given one.
   */
  public S hasWidth(int width) {
    // check that actual Board we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualWidth = actual.getWidth();
    if (actualWidth != width) {
      failWithMessage(assertjErrorMessage, actual, width, actualWidth);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
