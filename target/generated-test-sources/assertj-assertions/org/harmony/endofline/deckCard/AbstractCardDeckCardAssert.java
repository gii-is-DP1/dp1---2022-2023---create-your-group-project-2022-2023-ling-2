package org.harmony.endofline.deckCard;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.harmony.endofline.deckCard.DeckCard;

/**
 * Abstract base class for {@link DeckCard} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractCardDeckCardAssert<S extends AbstractCardDeckCardAssert<S, A>, A extends DeckCard> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractCardDeckCardAssert}</code> to make assertions on actual DeckCard.
   * @param actual the DeckCard we want to make assertions on.
   */
  protected AbstractCardDeckCardAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual DeckCard's card is equal to the given one.
   * @param card the given card to compare the actual DeckCard's card to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DeckCard's card is not equal to the given one.
   */
  public S hasCard(org.harmony.endofline.card.Card card) {
    // check that actual DeckCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting card of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.card.Card actualCard = actual.getCard();
    if (!Objects.areEqual(actualCard, card)) {
      failWithMessage(assertjErrorMessage, actual, card, actualCard);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DeckCard's cards is equal to the given one.
   * @param cards the given cards to compare the actual DeckCard's cards to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DeckCard's cards is not equal to the given one.
   */
  public S hasCards(java.util.stream.Stream cards) {
    // check that actual DeckCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cards of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.stream.Stream actualCards = actual.getCards();
    if (!Objects.areEqual(actualCards, cards)) {
      failWithMessage(assertjErrorMessage, actual, cards, actualCards);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DeckCard's deck is equal to the given one.
   * @param deck the given deck to compare the actual DeckCard's deck to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DeckCard's deck is not equal to the given one.
   */
  public S hasDeck(org.harmony.endofline.deck.Deck deck) {
    // check that actual DeckCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deck of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.deck.Deck actualDeck = actual.getDeck();
    if (!Objects.areEqual(actualDeck, deck)) {
      failWithMessage(assertjErrorMessage, actual, deck, actualDeck);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DeckCard's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual DeckCard's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DeckCard's quantity is not equal to the given one.
   */
  public S hasQuantity(Integer quantity) {
    // check that actual DeckCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualQuantity = actual.getQuantity();
    if (!Objects.areEqual(actualQuantity, quantity)) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
