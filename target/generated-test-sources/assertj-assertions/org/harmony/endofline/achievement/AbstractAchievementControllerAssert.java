package org.harmony.endofline.achievement;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link AchievementController} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAchievementControllerAssert<S extends AbstractAchievementControllerAssert<S, A>, A extends AchievementController> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAchievementControllerAssert}</code> to make assertions on actual AchievementController.
   * @param actual the AchievementController we want to make assertions on.
   */
  protected AbstractAchievementControllerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual AchievementController's conditions contains the given Achievement.condits elements.
   * @param conditions the given elements that should be contained in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions does not contain all given Achievement.condits elements.
   */
  public S hasConditions(Achievement.condits... conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits varargs is not null.
    if (conditions == null) failWithMessage("Expecting conditions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getConditions(), conditions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController's conditions contains the given Achievement.condits elements in Collection.
   * @param conditions the given elements that should be contained in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions does not contain all given Achievement.condits elements.
   */
  public S hasConditions(java.util.Collection<? extends Achievement.condits> conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits collection is not null.
    if (conditions == null) {
      failWithMessage("Expecting conditions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getConditions(), conditions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController's conditions contains <b>only</b> the given Achievement.condits elements and nothing else in whatever order.
   * @param conditions the given elements that should be contained in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions does not contain all given Achievement.condits elements.
   */
  public S hasOnlyConditions(Achievement.condits... conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits varargs is not null.
    if (conditions == null) failWithMessage("Expecting conditions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getConditions(), conditions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController's conditions contains <b>only</b> the given Achievement.condits elements in Collection and nothing else in whatever order.
   * @param conditions the given elements that should be contained in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions does not contain all given Achievement.condits elements.
   */
  public S hasOnlyConditions(java.util.Collection<? extends Achievement.condits> conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits collection is not null.
    if (conditions == null) {
      failWithMessage("Expecting conditions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getConditions(), conditions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController's conditions does not contain the given Achievement.condits elements.
   *
   * @param conditions the given elements that should not be in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions contains any given Achievement.condits elements.
   */
  public S doesNotHaveConditions(Achievement.condits... conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits varargs is not null.
    if (conditions == null) failWithMessage("Expecting conditions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getConditions(), conditions);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController's conditions does not contain the given Achievement.condits elements in Collection.
   *
   * @param conditions the given elements that should not be in actual AchievementController's conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions contains any given Achievement.condits elements.
   */
  public S doesNotHaveConditions(java.util.Collection<? extends Achievement.condits> conditions) {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement.condits collection is not null.
    if (conditions == null) {
      failWithMessage("Expecting conditions parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getConditions(), conditions.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementController has no conditions.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementController's conditions is not empty.
   */
  public S hasNoConditions() {
    // check that actual AchievementController we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have conditions but had :\n  <%s>";

    // check
    if (actual.getConditions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getConditions());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
