package org.harmony.endofline.achievement;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link AchievementService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAchievementServiceAssert<S extends AbstractAchievementServiceAssert<S, A>, A extends AchievementService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAchievementServiceAssert}</code> to make assertions on actual AchievementService.
   * @param actual the AchievementService we want to make assertions on.
   */
  protected AbstractAchievementServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual AchievementService's allAchievements contains the given Achievement elements.
   * @param allAchievements the given elements that should be contained in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements does not contain all given Achievement elements.
   */
  public S hasAllAchievements(Achievement... allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement varargs is not null.
    if (allAchievements == null) failWithMessage("Expecting allAchievements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllAchievements(), allAchievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService's allAchievements contains the given Achievement elements in Collection.
   * @param allAchievements the given elements that should be contained in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements does not contain all given Achievement elements.
   */
  public S hasAllAchievements(java.util.Collection<? extends Achievement> allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement collection is not null.
    if (allAchievements == null) {
      failWithMessage("Expecting allAchievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllAchievements(), allAchievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService's allAchievements contains <b>only</b> the given Achievement elements and nothing else in whatever order.
   * @param allAchievements the given elements that should be contained in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements does not contain all given Achievement elements.
   */
  public S hasOnlyAllAchievements(Achievement... allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement varargs is not null.
    if (allAchievements == null) failWithMessage("Expecting allAchievements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllAchievements(), allAchievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService's allAchievements contains <b>only</b> the given Achievement elements in Collection and nothing else in whatever order.
   * @param allAchievements the given elements that should be contained in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements does not contain all given Achievement elements.
   */
  public S hasOnlyAllAchievements(java.util.Collection<? extends Achievement> allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement collection is not null.
    if (allAchievements == null) {
      failWithMessage("Expecting allAchievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllAchievements(), allAchievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService's allAchievements does not contain the given Achievement elements.
   *
   * @param allAchievements the given elements that should not be in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements contains any given Achievement elements.
   */
  public S doesNotHaveAllAchievements(Achievement... allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement varargs is not null.
    if (allAchievements == null) failWithMessage("Expecting allAchievements parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllAchievements(), allAchievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService's allAchievements does not contain the given Achievement elements in Collection.
   *
   * @param allAchievements the given elements that should not be in actual AchievementService's allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements contains any given Achievement elements.
   */
  public S doesNotHaveAllAchievements(java.util.Collection<? extends Achievement> allAchievements) {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // check that given Achievement collection is not null.
    if (allAchievements == null) {
      failWithMessage("Expecting allAchievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllAchievements(), allAchievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AchievementService has no allAchievements.
   * @return this assertion object.
   * @throws AssertionError if the actual AchievementService's allAchievements is not empty.
   */
  public S hasNoAllAchievements() {
    // check that actual AchievementService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have allAchievements but had :\n  <%s>";

    // check
    if (actual.getAllAchievements().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAllAchievements());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
