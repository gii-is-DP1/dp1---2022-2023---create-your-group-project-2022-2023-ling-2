package org.harmony.endofline.achievement;

/**
 * {@link InvalidAchievementNameExeption} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractInvalidAchievementNameExeptionAssert} instead.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class InvalidAchievementNameExeptionAssert extends AbstractInvalidAchievementNameExeptionAssert<InvalidAchievementNameExeptionAssert, InvalidAchievementNameExeption> {

  /**
   * Creates a new <code>{@link InvalidAchievementNameExeptionAssert}</code> to make assertions on actual InvalidAchievementNameExeption.
   * @param actual the InvalidAchievementNameExeption we want to make assertions on.
   */
  public InvalidAchievementNameExeptionAssert(InvalidAchievementNameExeption actual) {
    super(actual, InvalidAchievementNameExeptionAssert.class);
  }

  /**
   * An entry point for InvalidAchievementNameExeptionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myInvalidAchievementNameExeption)</code> and get specific assertion with code completion.
   * @param actual the InvalidAchievementNameExeption we want to make assertions on.
   * @return a new <code>{@link InvalidAchievementNameExeptionAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static InvalidAchievementNameExeptionAssert assertThat(InvalidAchievementNameExeption actual) {
    return new InvalidAchievementNameExeptionAssert(actual);
  }
}
