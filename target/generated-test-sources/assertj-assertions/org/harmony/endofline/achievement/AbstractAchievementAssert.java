package org.harmony.endofline.achievement;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Achievement} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAchievementAssert<S extends AbstractAchievementAssert<S, A>, A extends Achievement> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAchievementAssert}</code> to make assertions on actual Achievement.
   * @param actual the Achievement we want to make assertions on.
   */
  protected AbstractAchievementAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Achievement's conditionAmounts is equal to the given one.
   * @param conditionAmounts the given conditionAmounts to compare the actual Achievement's conditionAmounts to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Achievement's conditionAmounts is not equal to the given one.
   */
  public S hasConditionAmounts(Integer conditionAmounts) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting conditionAmounts of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualConditionAmounts = actual.getConditionAmounts();
    if (!Objects.areEqual(actualConditionAmounts, conditionAmounts)) {
      failWithMessage(assertjErrorMessage, actual, conditionAmounts, actualConditionAmounts);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's conditions is equal to the given one.
   * @param conditions the given conditions to compare the actual Achievement's conditions to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Achievement's conditions is not equal to the given one.
   */
  public S hasConditions(Achievement.condits conditions) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting conditions of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Achievement.condits actualConditions = actual.getConditions();
    if (!Objects.areEqual(actualConditions, conditions)) {
      failWithMessage(assertjErrorMessage, actual, conditions, actualConditions);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's description is equal to the given one.
   * @param description the given description to compare the actual Achievement's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Achievement's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's name is equal to the given one.
   * @param name the given name to compare the actual Achievement's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Achievement's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users contains the given org.harmony.endofline.user.User elements.
   * @param users the given elements that should be contained in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users does not contain all given org.harmony.endofline.user.User elements.
   */
  public S hasUsers(org.harmony.endofline.user.User... users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users contains the given org.harmony.endofline.user.User elements in Collection.
   * @param users the given elements that should be contained in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users does not contain all given org.harmony.endofline.user.User elements.
   */
  public S hasUsers(java.util.Collection<? extends org.harmony.endofline.user.User> users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users contains <b>only</b> the given org.harmony.endofline.user.User elements and nothing else in whatever order.
   * @param users the given elements that should be contained in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users does not contain all given org.harmony.endofline.user.User elements.
   */
  public S hasOnlyUsers(org.harmony.endofline.user.User... users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users contains <b>only</b> the given org.harmony.endofline.user.User elements in Collection and nothing else in whatever order.
   * @param users the given elements that should be contained in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users does not contain all given org.harmony.endofline.user.User elements.
   */
  public S hasOnlyUsers(java.util.Collection<? extends org.harmony.endofline.user.User> users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users does not contain the given org.harmony.endofline.user.User elements.
   *
   * @param users the given elements that should not be in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users contains any given org.harmony.endofline.user.User elements.
   */
  public S doesNotHaveUsers(org.harmony.endofline.user.User... users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement's users does not contain the given org.harmony.endofline.user.User elements in Collection.
   *
   * @param users the given elements that should not be in actual Achievement's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users contains any given org.harmony.endofline.user.User elements.
   */
  public S doesNotHaveUsers(java.util.Collection<? extends org.harmony.endofline.user.User> users) {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.user.User collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Achievement has no users.
   * @return this assertion object.
   * @throws AssertionError if the actual Achievement's users is not empty.
   */
  public S hasNoUsers() {
    // check that actual Achievement we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have users but had :\n  <%s>";

    // check
    if (actual.getUsers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getUsers());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
