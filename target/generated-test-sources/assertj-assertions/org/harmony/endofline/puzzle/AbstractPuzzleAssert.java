package org.harmony.endofline.puzzle;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Puzzle} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractPuzzleAssert<S extends AbstractPuzzleAssert<S, A>, A extends Puzzle> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractPuzzleAssert}</code> to make assertions on actual Puzzle.
   * @param actual the Puzzle we want to make assertions on.
   */
  protected AbstractPuzzleAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Puzzle's difficulty is equal to the given one.
   * @param difficulty the given difficulty to compare the actual Puzzle's difficulty to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Puzzle's difficulty is not equal to the given one.
   */
  public S hasDifficulty(Difficulty difficulty) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting difficulty of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Difficulty actualDifficulty = actual.getDifficulty();
    if (!Objects.areEqual(actualDifficulty, difficulty)) {
      failWithMessage(assertjErrorMessage, actual, difficulty, actualDifficulty);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers contains the given org.harmony.endofline.singleplayer.Singleplayer elements.
   * @param singleplayers the given elements that should be contained in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasSingleplayers(org.harmony.endofline.singleplayer.Singleplayer... singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayers == null) failWithMessage("Expecting singleplayers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSingleplayers(), singleplayers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers contains the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection.
   * @param singleplayers the given elements that should be contained in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasSingleplayers(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayers == null) {
      failWithMessage("Expecting singleplayers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSingleplayers(), singleplayers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers contains <b>only</b> the given org.harmony.endofline.singleplayer.Singleplayer elements and nothing else in whatever order.
   * @param singleplayers the given elements that should be contained in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasOnlySingleplayers(org.harmony.endofline.singleplayer.Singleplayer... singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayers == null) failWithMessage("Expecting singleplayers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSingleplayers(), singleplayers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers contains <b>only</b> the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection and nothing else in whatever order.
   * @param singleplayers the given elements that should be contained in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasOnlySingleplayers(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayers == null) {
      failWithMessage("Expecting singleplayers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSingleplayers(), singleplayers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers does not contain the given org.harmony.endofline.singleplayer.Singleplayer elements.
   *
   * @param singleplayers the given elements that should not be in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers contains any given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S doesNotHaveSingleplayers(org.harmony.endofline.singleplayer.Singleplayer... singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayers == null) failWithMessage("Expecting singleplayers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSingleplayers(), singleplayers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle's singleplayers does not contain the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection.
   *
   * @param singleplayers the given elements that should not be in actual Puzzle's singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers contains any given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S doesNotHaveSingleplayers(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayers) {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayers == null) {
      failWithMessage("Expecting singleplayers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSingleplayers(), singleplayers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Puzzle has no singleplayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Puzzle's singleplayers is not empty.
   */
  public S hasNoSingleplayers() {
    // check that actual Puzzle we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have singleplayers but had :\n  <%s>";

    // check
    if (actual.getSingleplayers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSingleplayers());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
