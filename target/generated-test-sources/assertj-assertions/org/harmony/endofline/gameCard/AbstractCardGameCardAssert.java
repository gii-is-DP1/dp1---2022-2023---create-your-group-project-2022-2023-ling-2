package org.harmony.endofline.gameCard;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.harmony.endofline.gameCard.GameCard;

/**
 * Abstract base class for {@link GameCard} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractCardGameCardAssert<S extends AbstractCardGameCardAssert<S, A>, A extends GameCard> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractCardGameCardAssert}</code> to make assertions on actual GameCard.
   * @param actual the GameCard we want to make assertions on.
   */
  protected AbstractCardGameCardAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual GameCard's card is equal to the given one.
   * @param card the given card to compare the actual GameCard's card to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's card is not equal to the given one.
   */
  public S hasCard(org.harmony.endofline.card.Card card) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting card of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.card.Card actualCard = actual.getCard();
    if (!Objects.areEqual(actualCard, card)) {
      failWithMessage(assertjErrorMessage, actual, card, actualCard);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameCard's rotation is equal to the given one.
   * @param rotation the given rotation to compare the actual GameCard's rotation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's rotation is not equal to the given one.
   */
  public S hasRotation(Integer rotation) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rotation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRotation = actual.getRotation();
    if (!Objects.areEqual(actualRotation, rotation)) {
      failWithMessage(assertjErrorMessage, actual, rotation, actualRotation);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameCard's status is equal to the given one.
   * @param status the given status to compare the actual GameCard's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's status is not equal to the given one.
   */
  public S hasStatus(Status status) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Status actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameCard's user is equal to the given one.
   * @param user the given user to compare the actual GameCard's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's user is not equal to the given one.
   */
  public S hasUser(org.harmony.endofline.user.User user) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameCard's x is equal to the given one.
   * @param x the given x to compare the actual GameCard's x to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's x is not equal to the given one.
   */
  public S hasX(Integer x) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting x of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualX = actual.getX();
    if (!Objects.areEqual(actualX, x)) {
      failWithMessage(assertjErrorMessage, actual, x, actualX);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual GameCard's y is equal to the given one.
   * @param y the given y to compare the actual GameCard's y to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GameCard's y is not equal to the given one.
   */
  public S hasY(Integer y) {
    // check that actual GameCard we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting y of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualY = actual.getY();
    if (!Objects.areEqual(actualY, y)) {
      failWithMessage(assertjErrorMessage, actual, y, actualY);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
