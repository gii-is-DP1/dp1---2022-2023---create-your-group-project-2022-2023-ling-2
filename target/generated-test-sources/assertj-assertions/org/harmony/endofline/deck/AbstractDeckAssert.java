package org.harmony.endofline.deck;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link Deck} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDeckAssert<S extends AbstractDeckAssert<S, A>, A extends Deck> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDeckAssert}</code> to make assertions on actual Deck.
   * @param actual the Deck we want to make assertions on.
   */
  protected AbstractDeckAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Deck's deckCards contains the given org.harmony.endofline.deckCard.DeckCard elements.
   * @param deckCards the given elements that should be contained in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards does not contain all given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S hasDeckCards(org.harmony.endofline.deckCard.DeckCard... deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard varargs is not null.
    if (deckCards == null) failWithMessage("Expecting deckCards parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDeckCards(), deckCards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck's deckCards contains the given org.harmony.endofline.deckCard.DeckCard elements in Collection.
   * @param deckCards the given elements that should be contained in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards does not contain all given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S hasDeckCards(java.util.Collection<? extends org.harmony.endofline.deckCard.DeckCard> deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard collection is not null.
    if (deckCards == null) {
      failWithMessage("Expecting deckCards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDeckCards(), deckCards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck's deckCards contains <b>only</b> the given org.harmony.endofline.deckCard.DeckCard elements and nothing else in whatever order.
   * @param deckCards the given elements that should be contained in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards does not contain all given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S hasOnlyDeckCards(org.harmony.endofline.deckCard.DeckCard... deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard varargs is not null.
    if (deckCards == null) failWithMessage("Expecting deckCards parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDeckCards(), deckCards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck's deckCards contains <b>only</b> the given org.harmony.endofline.deckCard.DeckCard elements in Collection and nothing else in whatever order.
   * @param deckCards the given elements that should be contained in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards does not contain all given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S hasOnlyDeckCards(java.util.Collection<? extends org.harmony.endofline.deckCard.DeckCard> deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard collection is not null.
    if (deckCards == null) {
      failWithMessage("Expecting deckCards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDeckCards(), deckCards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck's deckCards does not contain the given org.harmony.endofline.deckCard.DeckCard elements.
   *
   * @param deckCards the given elements that should not be in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards contains any given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S doesNotHaveDeckCards(org.harmony.endofline.deckCard.DeckCard... deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard varargs is not null.
    if (deckCards == null) failWithMessage("Expecting deckCards parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDeckCards(), deckCards);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck's deckCards does not contain the given org.harmony.endofline.deckCard.DeckCard elements in Collection.
   *
   * @param deckCards the given elements that should not be in actual Deck's deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards contains any given org.harmony.endofline.deckCard.DeckCard elements.
   */
  public S doesNotHaveDeckCards(java.util.Collection<? extends org.harmony.endofline.deckCard.DeckCard> deckCards) {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.deckCard.DeckCard collection is not null.
    if (deckCards == null) {
      failWithMessage("Expecting deckCards parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDeckCards(), deckCards.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Deck has no deckCards.
   * @return this assertion object.
   * @throws AssertionError if the actual Deck's deckCards is not empty.
   */
  public S hasNoDeckCards() {
    // check that actual Deck we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have deckCards but had :\n  <%s>";

    // check
    if (actual.getDeckCards().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDeckCards());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
