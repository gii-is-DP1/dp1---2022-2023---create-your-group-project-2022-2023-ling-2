package org.harmony.endofline.multiplayer;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Multiplayer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMultiplayerAssert<S extends AbstractMultiplayerAssert<S, A>, A extends Multiplayer> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMultiplayerAssert}</code> to make assertions on actual Multiplayer.
   * @param actual the Multiplayer we want to make assertions on.
   */
  protected AbstractMultiplayerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Multiplayer's p1EnergyLeft is equal to the given one.
   * @param p1EnergyLeft the given p1EnergyLeft to compare the actual Multiplayer's p1EnergyLeft to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Multiplayer's p1EnergyLeft is not equal to the given one.
   */
  public S hasP1EnergyLeft(Integer p1EnergyLeft) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting p1EnergyLeft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualP1EnergyLeft = actual.getP1EnergyLeft();
    if (!Objects.areEqual(actualP1EnergyLeft, p1EnergyLeft)) {
      failWithMessage(assertjErrorMessage, actual, p1EnergyLeft, actualP1EnergyLeft);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's p2EnergyLeft is equal to the given one.
   * @param p2EnergyLeft the given p2EnergyLeft to compare the actual Multiplayer's p2EnergyLeft to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Multiplayer's p2EnergyLeft is not equal to the given one.
   */
  public S hasP2EnergyLeft(Integer p2EnergyLeft) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting p2EnergyLeft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualP2EnergyLeft = actual.getP2EnergyLeft();
    if (!Objects.areEqual(actualP2EnergyLeft, p2EnergyLeft)) {
      failWithMessage(assertjErrorMessage, actual, p2EnergyLeft, actualP2EnergyLeft);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList contains the given Integer elements.
   * @param priorityList the given elements that should be contained in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList does not contain all given Integer elements.
   */
  public S hasPriorityList(Integer... priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (priorityList == null) failWithMessage("Expecting priorityList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPriorityList(), priorityList);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList contains the given Integer elements in Collection.
   * @param priorityList the given elements that should be contained in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList does not contain all given Integer elements.
   */
  public S hasPriorityList(java.util.Collection<? extends Integer> priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer collection is not null.
    if (priorityList == null) {
      failWithMessage("Expecting priorityList parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPriorityList(), priorityList.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList contains <b>only</b> the given Integer elements and nothing else in whatever order.
   * @param priorityList the given elements that should be contained in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList does not contain all given Integer elements.
   */
  public S hasOnlyPriorityList(Integer... priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (priorityList == null) failWithMessage("Expecting priorityList parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPriorityList(), priorityList);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList contains <b>only</b> the given Integer elements in Collection and nothing else in whatever order.
   * @param priorityList the given elements that should be contained in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList does not contain all given Integer elements.
   */
  public S hasOnlyPriorityList(java.util.Collection<? extends Integer> priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer collection is not null.
    if (priorityList == null) {
      failWithMessage("Expecting priorityList parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPriorityList(), priorityList.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList does not contain the given Integer elements.
   *
   * @param priorityList the given elements that should not be in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList contains any given Integer elements.
   */
  public S doesNotHavePriorityList(Integer... priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (priorityList == null) failWithMessage("Expecting priorityList parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPriorityList(), priorityList);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's priorityList does not contain the given Integer elements in Collection.
   *
   * @param priorityList the given elements that should not be in actual Multiplayer's priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList contains any given Integer elements.
   */
  public S doesNotHavePriorityList(java.util.Collection<? extends Integer> priorityList) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given Integer collection is not null.
    if (priorityList == null) {
      failWithMessage("Expecting priorityList parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPriorityList(), priorityList.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer has no priorityList.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's priorityList is not empty.
   */
  public S hasNoPriorityList() {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have priorityList but had :\n  <%s>";

    // check
    if (actual.getPriorityList().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPriorityList());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Multiplayer's users contains the given org.harmony.endofline.userGame.UserGame elements.
   * @param users the given elements that should be contained in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasUsers(org.harmony.endofline.userGame.UserGame... users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's users contains the given org.harmony.endofline.userGame.UserGame elements in Collection.
   * @param users the given elements that should be contained in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasUsers(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's users contains <b>only</b> the given org.harmony.endofline.userGame.UserGame elements and nothing else in whatever order.
   * @param users the given elements that should be contained in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasOnlyUsers(org.harmony.endofline.userGame.UserGame... users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's users contains <b>only</b> the given org.harmony.endofline.userGame.UserGame elements in Collection and nothing else in whatever order.
   * @param users the given elements that should be contained in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasOnlyUsers(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's users does not contain the given org.harmony.endofline.userGame.UserGame elements.
   *
   * @param users the given elements that should not be in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users contains any given org.harmony.endofline.userGame.UserGame elements.
   */
  public S doesNotHaveUsers(org.harmony.endofline.userGame.UserGame... users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (users == null) failWithMessage("Expecting users parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getUsers(), users);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer's users does not contain the given org.harmony.endofline.userGame.UserGame elements in Collection.
   *
   * @param users the given elements that should not be in actual Multiplayer's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users contains any given org.harmony.endofline.userGame.UserGame elements.
   */
  public S doesNotHaveUsers(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> users) {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (users == null) {
      failWithMessage("Expecting users parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getUsers(), users.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Multiplayer has no users.
   * @return this assertion object.
   * @throws AssertionError if the actual Multiplayer's users is not empty.
   */
  public S hasNoUsers() {
    // check that actual Multiplayer we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have users but had :\n  <%s>";

    // check
    if (actual.getUsers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getUsers());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
