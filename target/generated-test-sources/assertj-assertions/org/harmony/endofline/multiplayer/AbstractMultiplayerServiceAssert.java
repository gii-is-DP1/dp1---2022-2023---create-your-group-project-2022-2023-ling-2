package org.harmony.endofline.multiplayer;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link MultiplayerService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMultiplayerServiceAssert<S extends AbstractMultiplayerServiceAssert<S, A>, A extends MultiplayerService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMultiplayerServiceAssert}</code> to make assertions on actual MultiplayerService.
   * @param actual the MultiplayerService we want to make assertions on.
   */
  protected AbstractMultiplayerServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser contains the given Multiplayer elements.
   * @param allGamesWithUser the given elements that should be contained in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser does not contain all given Multiplayer elements.
   */
  public S hasAllGamesWithUser(Multiplayer... allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer varargs is not null.
    if (allGamesWithUser == null) failWithMessage("Expecting allGamesWithUser parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllGamesWithUser(), allGamesWithUser);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser contains the given Multiplayer elements in Collection.
   * @param allGamesWithUser the given elements that should be contained in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser does not contain all given Multiplayer elements.
   */
  public S hasAllGamesWithUser(java.util.Collection<? extends Multiplayer> allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer collection is not null.
    if (allGamesWithUser == null) {
      failWithMessage("Expecting allGamesWithUser parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllGamesWithUser(), allGamesWithUser.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser contains <b>only</b> the given Multiplayer elements and nothing else in whatever order.
   * @param allGamesWithUser the given elements that should be contained in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser does not contain all given Multiplayer elements.
   */
  public S hasOnlyAllGamesWithUser(Multiplayer... allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer varargs is not null.
    if (allGamesWithUser == null) failWithMessage("Expecting allGamesWithUser parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllGamesWithUser(), allGamesWithUser);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser contains <b>only</b> the given Multiplayer elements in Collection and nothing else in whatever order.
   * @param allGamesWithUser the given elements that should be contained in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser does not contain all given Multiplayer elements.
   */
  public S hasOnlyAllGamesWithUser(java.util.Collection<? extends Multiplayer> allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer collection is not null.
    if (allGamesWithUser == null) {
      failWithMessage("Expecting allGamesWithUser parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllGamesWithUser(), allGamesWithUser.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser does not contain the given Multiplayer elements.
   *
   * @param allGamesWithUser the given elements that should not be in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser contains any given Multiplayer elements.
   */
  public S doesNotHaveAllGamesWithUser(Multiplayer... allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer varargs is not null.
    if (allGamesWithUser == null) failWithMessage("Expecting allGamesWithUser parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllGamesWithUser(), allGamesWithUser);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService's allGamesWithUser does not contain the given Multiplayer elements in Collection.
   *
   * @param allGamesWithUser the given elements that should not be in actual MultiplayerService's allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser contains any given Multiplayer elements.
   */
  public S doesNotHaveAllGamesWithUser(java.util.Collection<? extends Multiplayer> allGamesWithUser) {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // check that given Multiplayer collection is not null.
    if (allGamesWithUser == null) {
      failWithMessage("Expecting allGamesWithUser parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllGamesWithUser(), allGamesWithUser.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultiplayerService has no allGamesWithUser.
   * @return this assertion object.
   * @throws AssertionError if the actual MultiplayerService's allGamesWithUser is not empty.
   */
  public S hasNoAllGamesWithUser() {
    // check that actual MultiplayerService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have allGamesWithUser but had :\n  <%s>";

    // check
    if (actual.getAllGamesWithUser().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAllGamesWithUser());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
