package org.harmony.endofline.user;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link User} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractUserAssert<S extends AbstractUserAssert<S, A>, A extends User> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractUserAssert}</code> to make assertions on actual User.
   * @param actual the User we want to make assertions on.
   */
  protected AbstractUserAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual User's achievements contains the given org.harmony.endofline.achievement.Achievement elements.
   * @param achievements the given elements that should be contained in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements does not contain all given org.harmony.endofline.achievement.Achievement elements.
   */
  public S hasAchievements(org.harmony.endofline.achievement.Achievement... achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement varargs is not null.
    if (achievements == null) failWithMessage("Expecting achievements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAchievements(), achievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's achievements contains the given org.harmony.endofline.achievement.Achievement elements in Collection.
   * @param achievements the given elements that should be contained in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements does not contain all given org.harmony.endofline.achievement.Achievement elements.
   */
  public S hasAchievements(java.util.Collection<? extends org.harmony.endofline.achievement.Achievement> achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement collection is not null.
    if (achievements == null) {
      failWithMessage("Expecting achievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAchievements(), achievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's achievements contains <b>only</b> the given org.harmony.endofline.achievement.Achievement elements and nothing else in whatever order.
   * @param achievements the given elements that should be contained in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements does not contain all given org.harmony.endofline.achievement.Achievement elements.
   */
  public S hasOnlyAchievements(org.harmony.endofline.achievement.Achievement... achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement varargs is not null.
    if (achievements == null) failWithMessage("Expecting achievements parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAchievements(), achievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's achievements contains <b>only</b> the given org.harmony.endofline.achievement.Achievement elements in Collection and nothing else in whatever order.
   * @param achievements the given elements that should be contained in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements does not contain all given org.harmony.endofline.achievement.Achievement elements.
   */
  public S hasOnlyAchievements(java.util.Collection<? extends org.harmony.endofline.achievement.Achievement> achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement collection is not null.
    if (achievements == null) {
      failWithMessage("Expecting achievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAchievements(), achievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's achievements does not contain the given org.harmony.endofline.achievement.Achievement elements.
   *
   * @param achievements the given elements that should not be in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements contains any given org.harmony.endofline.achievement.Achievement elements.
   */
  public S doesNotHaveAchievements(org.harmony.endofline.achievement.Achievement... achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement varargs is not null.
    if (achievements == null) failWithMessage("Expecting achievements parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAchievements(), achievements);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's achievements does not contain the given org.harmony.endofline.achievement.Achievement elements in Collection.
   *
   * @param achievements the given elements that should not be in actual User's achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements contains any given org.harmony.endofline.achievement.Achievement elements.
   */
  public S doesNotHaveAchievements(java.util.Collection<? extends org.harmony.endofline.achievement.Achievement> achievements) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.achievement.Achievement collection is not null.
    if (achievements == null) {
      failWithMessage("Expecting achievements parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAchievements(), achievements.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no achievements.
   * @return this assertion object.
   * @throws AssertionError if the actual User's achievements is not empty.
   */
  public S hasNoAchievements() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have achievements but had :\n  <%s>";

    // check
    if (actual.getAchievements().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAchievements());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's email is equal to the given one.
   * @param email the given email to compare the actual User's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's email is not equal to the given one.
   */
  public S hasEmail(String email) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!Objects.areEqual(actualEmail, email)) {
      failWithMessage(assertjErrorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's enabled is equal to the given one.
   * @param enabled the given enabled to compare the actual User's enabled to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's enabled is not equal to the given one.
   */
  public S hasEnabled(Boolean enabled) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting enabled of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualEnabled = actual.getEnabled();
    if (!Objects.areEqual(actualEnabled, enabled)) {
      failWithMessage(assertjErrorMessage, actual, enabled, actualEnabled);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends contains the given User elements.
   * @param friends the given elements that should be contained in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends does not contain all given User elements.
   */
  public S hasFriends(User... friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User varargs is not null.
    if (friends == null) failWithMessage("Expecting friends parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFriends(), friends);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends contains the given User elements in Collection.
   * @param friends the given elements that should be contained in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends does not contain all given User elements.
   */
  public S hasFriends(java.util.Collection<? extends User> friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User collection is not null.
    if (friends == null) {
      failWithMessage("Expecting friends parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFriends(), friends.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends contains <b>only</b> the given User elements and nothing else in whatever order.
   * @param friends the given elements that should be contained in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends does not contain all given User elements.
   */
  public S hasOnlyFriends(User... friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User varargs is not null.
    if (friends == null) failWithMessage("Expecting friends parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFriends(), friends);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends contains <b>only</b> the given User elements in Collection and nothing else in whatever order.
   * @param friends the given elements that should be contained in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends does not contain all given User elements.
   */
  public S hasOnlyFriends(java.util.Collection<? extends User> friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User collection is not null.
    if (friends == null) {
      failWithMessage("Expecting friends parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFriends(), friends.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends does not contain the given User elements.
   *
   * @param friends the given elements that should not be in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends contains any given User elements.
   */
  public S doesNotHaveFriends(User... friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User varargs is not null.
    if (friends == null) failWithMessage("Expecting friends parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFriends(), friends);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's friends does not contain the given User elements in Collection.
   *
   * @param friends the given elements that should not be in actual User's friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends contains any given User elements.
   */
  public S doesNotHaveFriends(java.util.Collection<? extends User> friends) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given User collection is not null.
    if (friends == null) {
      failWithMessage("Expecting friends parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFriends(), friends.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no friends.
   * @return this assertion object.
   * @throws AssertionError if the actual User's friends is not empty.
   */
  public S hasNoFriends() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have friends but had :\n  <%s>";

    // check
    if (actual.getFriends().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getFriends());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's isAdmin is equal to the given one.
   * @param isAdmin the given isAdmin to compare the actual User's isAdmin to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's isAdmin is not equal to the given one.
   */
  public S hasIsAdmin(Boolean isAdmin) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting isAdmin of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Boolean actualIsAdmin = actual.getIsAdmin();
    if (!Objects.areEqual(actualIsAdmin, isAdmin)) {
      failWithMessage(assertjErrorMessage, actual, isAdmin, actualIsAdmin);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames contains the given org.harmony.endofline.userGame.UserGame elements.
   * @param multiplayerGames the given elements that should be contained in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasMultiplayerGames(org.harmony.endofline.userGame.UserGame... multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (multiplayerGames == null) failWithMessage("Expecting multiplayerGames parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMultiplayerGames(), multiplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames contains the given org.harmony.endofline.userGame.UserGame elements in Collection.
   * @param multiplayerGames the given elements that should be contained in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasMultiplayerGames(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (multiplayerGames == null) {
      failWithMessage("Expecting multiplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getMultiplayerGames(), multiplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames contains <b>only</b> the given org.harmony.endofline.userGame.UserGame elements and nothing else in whatever order.
   * @param multiplayerGames the given elements that should be contained in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasOnlyMultiplayerGames(org.harmony.endofline.userGame.UserGame... multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (multiplayerGames == null) failWithMessage("Expecting multiplayerGames parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMultiplayerGames(), multiplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames contains <b>only</b> the given org.harmony.endofline.userGame.UserGame elements in Collection and nothing else in whatever order.
   * @param multiplayerGames the given elements that should be contained in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames does not contain all given org.harmony.endofline.userGame.UserGame elements.
   */
  public S hasOnlyMultiplayerGames(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (multiplayerGames == null) {
      failWithMessage("Expecting multiplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getMultiplayerGames(), multiplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames does not contain the given org.harmony.endofline.userGame.UserGame elements.
   *
   * @param multiplayerGames the given elements that should not be in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames contains any given org.harmony.endofline.userGame.UserGame elements.
   */
  public S doesNotHaveMultiplayerGames(org.harmony.endofline.userGame.UserGame... multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame varargs is not null.
    if (multiplayerGames == null) failWithMessage("Expecting multiplayerGames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMultiplayerGames(), multiplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's multiplayerGames does not contain the given org.harmony.endofline.userGame.UserGame elements in Collection.
   *
   * @param multiplayerGames the given elements that should not be in actual User's multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames contains any given org.harmony.endofline.userGame.UserGame elements.
   */
  public S doesNotHaveMultiplayerGames(java.util.Collection<? extends org.harmony.endofline.userGame.UserGame> multiplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.userGame.UserGame collection is not null.
    if (multiplayerGames == null) {
      failWithMessage("Expecting multiplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getMultiplayerGames(), multiplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no multiplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's multiplayerGames is not empty.
   */
  public S hasNoMultiplayerGames() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have multiplayerGames but had :\n  <%s>";

    // check
    if (actual.getMultiplayerGames().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getMultiplayerGames());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's password is equal to the given one.
   * @param password the given password to compare the actual User's password to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's password is not equal to the given one.
   */
  public S hasPassword(String password) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPassword = actual.getPassword();
    if (!Objects.areEqual(actualPassword, password)) {
      failWithMessage(assertjErrorMessage, actual, password, actualPassword);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations contains the given org.harmony.endofline.gameInvite.GameInvite elements.
   * @param receivedInvitations the given elements that should be contained in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasReceivedInvitations(org.harmony.endofline.gameInvite.GameInvite... receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (receivedInvitations == null) failWithMessage("Expecting receivedInvitations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReceivedInvitations(), receivedInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations contains the given org.harmony.endofline.gameInvite.GameInvite elements in Collection.
   * @param receivedInvitations the given elements that should be contained in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasReceivedInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (receivedInvitations == null) {
      failWithMessage("Expecting receivedInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReceivedInvitations(), receivedInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations contains <b>only</b> the given org.harmony.endofline.gameInvite.GameInvite elements and nothing else in whatever order.
   * @param receivedInvitations the given elements that should be contained in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasOnlyReceivedInvitations(org.harmony.endofline.gameInvite.GameInvite... receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (receivedInvitations == null) failWithMessage("Expecting receivedInvitations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReceivedInvitations(), receivedInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations contains <b>only</b> the given org.harmony.endofline.gameInvite.GameInvite elements in Collection and nothing else in whatever order.
   * @param receivedInvitations the given elements that should be contained in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasOnlyReceivedInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (receivedInvitations == null) {
      failWithMessage("Expecting receivedInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReceivedInvitations(), receivedInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations does not contain the given org.harmony.endofline.gameInvite.GameInvite elements.
   *
   * @param receivedInvitations the given elements that should not be in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations contains any given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S doesNotHaveReceivedInvitations(org.harmony.endofline.gameInvite.GameInvite... receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (receivedInvitations == null) failWithMessage("Expecting receivedInvitations parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReceivedInvitations(), receivedInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedInvitations does not contain the given org.harmony.endofline.gameInvite.GameInvite elements in Collection.
   *
   * @param receivedInvitations the given elements that should not be in actual User's receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations contains any given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S doesNotHaveReceivedInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> receivedInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (receivedInvitations == null) {
      failWithMessage("Expecting receivedInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReceivedInvitations(), receivedInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no receivedInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedInvitations is not empty.
   */
  public S hasNoReceivedInvitations() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have receivedInvitations but had :\n  <%s>";

    // check
    if (actual.getReceivedInvitations().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReceivedInvitations());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's receivedRequests contains the given org.harmony.endofline.friendRequest.FriendRequest elements.
   * @param receivedRequests the given elements that should be contained in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasReceivedRequests(org.harmony.endofline.friendRequest.FriendRequest... receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (receivedRequests == null) failWithMessage("Expecting receivedRequests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReceivedRequests(), receivedRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedRequests contains the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection.
   * @param receivedRequests the given elements that should be contained in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasReceivedRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (receivedRequests == null) {
      failWithMessage("Expecting receivedRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReceivedRequests(), receivedRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedRequests contains <b>only</b> the given org.harmony.endofline.friendRequest.FriendRequest elements and nothing else in whatever order.
   * @param receivedRequests the given elements that should be contained in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasOnlyReceivedRequests(org.harmony.endofline.friendRequest.FriendRequest... receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (receivedRequests == null) failWithMessage("Expecting receivedRequests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReceivedRequests(), receivedRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedRequests contains <b>only</b> the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection and nothing else in whatever order.
   * @param receivedRequests the given elements that should be contained in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasOnlyReceivedRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (receivedRequests == null) {
      failWithMessage("Expecting receivedRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReceivedRequests(), receivedRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedRequests does not contain the given org.harmony.endofline.friendRequest.FriendRequest elements.
   *
   * @param receivedRequests the given elements that should not be in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests contains any given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S doesNotHaveReceivedRequests(org.harmony.endofline.friendRequest.FriendRequest... receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (receivedRequests == null) failWithMessage("Expecting receivedRequests parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReceivedRequests(), receivedRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's receivedRequests does not contain the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection.
   *
   * @param receivedRequests the given elements that should not be in actual User's receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests contains any given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S doesNotHaveReceivedRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> receivedRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (receivedRequests == null) {
      failWithMessage("Expecting receivedRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReceivedRequests(), receivedRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no receivedRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's receivedRequests is not empty.
   */
  public S hasNoReceivedRequests() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have receivedRequests but had :\n  <%s>";

    // check
    if (actual.getReceivedRequests().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReceivedRequests());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's sentInvitations contains the given org.harmony.endofline.gameInvite.GameInvite elements.
   * @param sentInvitations the given elements that should be contained in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasSentInvitations(org.harmony.endofline.gameInvite.GameInvite... sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (sentInvitations == null) failWithMessage("Expecting sentInvitations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSentInvitations(), sentInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentInvitations contains the given org.harmony.endofline.gameInvite.GameInvite elements in Collection.
   * @param sentInvitations the given elements that should be contained in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasSentInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (sentInvitations == null) {
      failWithMessage("Expecting sentInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSentInvitations(), sentInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentInvitations contains <b>only</b> the given org.harmony.endofline.gameInvite.GameInvite elements and nothing else in whatever order.
   * @param sentInvitations the given elements that should be contained in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasOnlySentInvitations(org.harmony.endofline.gameInvite.GameInvite... sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (sentInvitations == null) failWithMessage("Expecting sentInvitations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSentInvitations(), sentInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentInvitations contains <b>only</b> the given org.harmony.endofline.gameInvite.GameInvite elements in Collection and nothing else in whatever order.
   * @param sentInvitations the given elements that should be contained in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations does not contain all given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S hasOnlySentInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (sentInvitations == null) {
      failWithMessage("Expecting sentInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSentInvitations(), sentInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentInvitations does not contain the given org.harmony.endofline.gameInvite.GameInvite elements.
   *
   * @param sentInvitations the given elements that should not be in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations contains any given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S doesNotHaveSentInvitations(org.harmony.endofline.gameInvite.GameInvite... sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite varargs is not null.
    if (sentInvitations == null) failWithMessage("Expecting sentInvitations parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSentInvitations(), sentInvitations);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentInvitations does not contain the given org.harmony.endofline.gameInvite.GameInvite elements in Collection.
   *
   * @param sentInvitations the given elements that should not be in actual User's sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations contains any given org.harmony.endofline.gameInvite.GameInvite elements.
   */
  public S doesNotHaveSentInvitations(java.util.Collection<? extends org.harmony.endofline.gameInvite.GameInvite> sentInvitations) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.gameInvite.GameInvite collection is not null.
    if (sentInvitations == null) {
      failWithMessage("Expecting sentInvitations parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSentInvitations(), sentInvitations.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no sentInvitations.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentInvitations is not empty.
   */
  public S hasNoSentInvitations() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have sentInvitations but had :\n  <%s>";

    // check
    if (actual.getSentInvitations().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSentInvitations());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's sentRequests contains the given org.harmony.endofline.friendRequest.FriendRequest elements.
   * @param sentRequests the given elements that should be contained in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasSentRequests(org.harmony.endofline.friendRequest.FriendRequest... sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (sentRequests == null) failWithMessage("Expecting sentRequests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSentRequests(), sentRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentRequests contains the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection.
   * @param sentRequests the given elements that should be contained in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasSentRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (sentRequests == null) {
      failWithMessage("Expecting sentRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSentRequests(), sentRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentRequests contains <b>only</b> the given org.harmony.endofline.friendRequest.FriendRequest elements and nothing else in whatever order.
   * @param sentRequests the given elements that should be contained in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasOnlySentRequests(org.harmony.endofline.friendRequest.FriendRequest... sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (sentRequests == null) failWithMessage("Expecting sentRequests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSentRequests(), sentRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentRequests contains <b>only</b> the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection and nothing else in whatever order.
   * @param sentRequests the given elements that should be contained in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests does not contain all given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S hasOnlySentRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (sentRequests == null) {
      failWithMessage("Expecting sentRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSentRequests(), sentRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentRequests does not contain the given org.harmony.endofline.friendRequest.FriendRequest elements.
   *
   * @param sentRequests the given elements that should not be in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests contains any given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S doesNotHaveSentRequests(org.harmony.endofline.friendRequest.FriendRequest... sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest varargs is not null.
    if (sentRequests == null) failWithMessage("Expecting sentRequests parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSentRequests(), sentRequests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's sentRequests does not contain the given org.harmony.endofline.friendRequest.FriendRequest elements in Collection.
   *
   * @param sentRequests the given elements that should not be in actual User's sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests contains any given org.harmony.endofline.friendRequest.FriendRequest elements.
   */
  public S doesNotHaveSentRequests(java.util.Collection<? extends org.harmony.endofline.friendRequest.FriendRequest> sentRequests) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.friendRequest.FriendRequest collection is not null.
    if (sentRequests == null) {
      failWithMessage("Expecting sentRequests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSentRequests(), sentRequests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no sentRequests.
   * @return this assertion object.
   * @throws AssertionError if the actual User's sentRequests is not empty.
   */
  public S hasNoSentRequests() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have sentRequests but had :\n  <%s>";

    // check
    if (actual.getSentRequests().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSentRequests());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's singleplayerGames contains the given org.harmony.endofline.singleplayer.Singleplayer elements.
   * @param singleplayerGames the given elements that should be contained in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasSingleplayerGames(org.harmony.endofline.singleplayer.Singleplayer... singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayerGames == null) failWithMessage("Expecting singleplayerGames parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSingleplayerGames(), singleplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's singleplayerGames contains the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection.
   * @param singleplayerGames the given elements that should be contained in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasSingleplayerGames(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayerGames == null) {
      failWithMessage("Expecting singleplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSingleplayerGames(), singleplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's singleplayerGames contains <b>only</b> the given org.harmony.endofline.singleplayer.Singleplayer elements and nothing else in whatever order.
   * @param singleplayerGames the given elements that should be contained in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasOnlySingleplayerGames(org.harmony.endofline.singleplayer.Singleplayer... singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayerGames == null) failWithMessage("Expecting singleplayerGames parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSingleplayerGames(), singleplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's singleplayerGames contains <b>only</b> the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection and nothing else in whatever order.
   * @param singleplayerGames the given elements that should be contained in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames does not contain all given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S hasOnlySingleplayerGames(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayerGames == null) {
      failWithMessage("Expecting singleplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSingleplayerGames(), singleplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's singleplayerGames does not contain the given org.harmony.endofline.singleplayer.Singleplayer elements.
   *
   * @param singleplayerGames the given elements that should not be in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames contains any given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S doesNotHaveSingleplayerGames(org.harmony.endofline.singleplayer.Singleplayer... singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer varargs is not null.
    if (singleplayerGames == null) failWithMessage("Expecting singleplayerGames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSingleplayerGames(), singleplayerGames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's singleplayerGames does not contain the given org.harmony.endofline.singleplayer.Singleplayer elements in Collection.
   *
   * @param singleplayerGames the given elements that should not be in actual User's singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames contains any given org.harmony.endofline.singleplayer.Singleplayer elements.
   */
  public S doesNotHaveSingleplayerGames(java.util.Collection<? extends org.harmony.endofline.singleplayer.Singleplayer> singleplayerGames) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given org.harmony.endofline.singleplayer.Singleplayer collection is not null.
    if (singleplayerGames == null) {
      failWithMessage("Expecting singleplayerGames parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSingleplayerGames(), singleplayerGames.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User has no singleplayerGames.
   * @return this assertion object.
   * @throws AssertionError if the actual User's singleplayerGames is not empty.
   */
  public S hasNoSingleplayerGames() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have singleplayerGames but had :\n  <%s>";

    // check
    if (actual.getSingleplayerGames().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSingleplayerGames());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual User's statistic is equal to the given one.
   * @param statistic the given statistic to compare the actual User's statistic to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's statistic is not equal to the given one.
   */
  public S hasStatistic(org.harmony.endofline.statistic.Statistic statistic) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting statistic of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.statistic.Statistic actualStatistic = actual.getStatistic();
    if (!Objects.areEqual(actualStatistic, statistic)) {
      failWithMessage(assertjErrorMessage, actual, statistic, actualStatistic);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's username is equal to the given one.
   * @param username the given username to compare the actual User's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's username is not equal to the given one.
   */
  public S hasUsername(String username) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
