package org.harmony.endofline.singleplayer;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Singleplayer} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractSingleplayerAssert<S extends AbstractSingleplayerAssert<S, A>, A extends Singleplayer> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractSingleplayerAssert}</code> to make assertions on actual Singleplayer.
   * @param actual the Singleplayer we want to make assertions on.
   */
  protected AbstractSingleplayerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Singleplayer's energy is equal to the given one.
   * @param energy the given energy to compare the actual Singleplayer's energy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Singleplayer's energy is not equal to the given one.
   */
  public S hasEnergy(Integer energy) {
    // check that actual Singleplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting energy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualEnergy = actual.getEnergy();
    if (!Objects.areEqual(actualEnergy, energy)) {
      failWithMessage(assertjErrorMessage, actual, energy, actualEnergy);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Singleplayer's lastPlacedCard is equal to the given one.
   * @param lastPlacedCard the given lastPlacedCard to compare the actual Singleplayer's lastPlacedCard to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Singleplayer's lastPlacedCard is not equal to the given one.
   */
  public S hasLastPlacedCard(org.harmony.endofline.gameCard.GameCard lastPlacedCard) {
    // check that actual Singleplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastPlacedCard of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.gameCard.GameCard actualLastPlacedCard = actual.getLastPlacedCard();
    if (!Objects.areEqual(actualLastPlacedCard, lastPlacedCard)) {
      failWithMessage(assertjErrorMessage, actual, lastPlacedCard, actualLastPlacedCard);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Singleplayer's puzzle is equal to the given one.
   * @param puzzle the given puzzle to compare the actual Singleplayer's puzzle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Singleplayer's puzzle is not equal to the given one.
   */
  public S hasPuzzle(org.harmony.endofline.puzzle.Puzzle puzzle) {
    // check that actual Singleplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting puzzle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.puzzle.Puzzle actualPuzzle = actual.getPuzzle();
    if (!Objects.areEqual(actualPuzzle, puzzle)) {
      failWithMessage(assertjErrorMessage, actual, puzzle, actualPuzzle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Singleplayer's user is equal to the given one.
   * @param user the given user to compare the actual Singleplayer's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Singleplayer's user is not equal to the given one.
   */
  public S hasUser(org.harmony.endofline.user.User user) {
    // check that actual Singleplayer we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
