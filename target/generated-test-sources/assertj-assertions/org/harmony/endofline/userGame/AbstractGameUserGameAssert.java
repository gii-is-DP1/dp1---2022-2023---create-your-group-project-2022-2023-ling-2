package org.harmony.endofline.userGame;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.harmony.endofline.userGame.UserGame;

/**
 * Abstract base class for {@link UserGame} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractGameUserGameAssert<S extends AbstractGameUserGameAssert<S, A>, A extends UserGame> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractGameUserGameAssert}</code> to make assertions on actual UserGame.
   * @param actual the UserGame we want to make assertions on.
   */
  protected AbstractGameUserGameAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual UserGame's game is equal to the given one.
   * @param game the given game to compare the actual UserGame's game to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserGame's game is not equal to the given one.
   */
  public S hasGame(org.harmony.endofline.multiplayer.Multiplayer game) {
    // check that actual UserGame we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting game of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.multiplayer.Multiplayer actualGame = actual.getGame();
    if (!Objects.areEqual(actualGame, game)) {
      failWithMessage(assertjErrorMessage, actual, game, actualGame);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual UserGame's player is equal to the given one.
   * @param player the given player to compare the actual UserGame's player to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserGame's player is not equal to the given one.
   */
  public S hasPlayer(Integer player) {
    // check that actual UserGame we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting player of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualPlayer = actual.getPlayer();
    if (!Objects.areEqual(actualPlayer, player)) {
      failWithMessage(assertjErrorMessage, actual, player, actualPlayer);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual UserGame's role is equal to the given one.
   * @param role the given role to compare the actual UserGame's role to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserGame's role is not equal to the given one.
   */
  public S hasRole(PlayerType role) {
    // check that actual UserGame we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    PlayerType actualRole = actual.getRole();
    if (!Objects.areEqual(actualRole, role)) {
      failWithMessage(assertjErrorMessage, actual, role, actualRole);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual UserGame's user is equal to the given one.
   * @param user the given user to compare the actual UserGame's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserGame's user is not equal to the given one.
   */
  public S hasUser(org.harmony.endofline.user.User user) {
    // check that actual UserGame we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
