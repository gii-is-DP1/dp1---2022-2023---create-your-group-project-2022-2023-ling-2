package org.harmony.endofline.statistic;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link StatisticService} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractStatisticServiceAssert<S extends AbstractStatisticServiceAssert<S, A>, A extends StatisticService> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractStatisticServiceAssert}</code> to make assertions on actual StatisticService.
   * @param actual the StatisticService we want to make assertions on.
   */
  protected AbstractStatisticServiceAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual StatisticService's allStatistics contains the given Statistic elements.
   * @param allStatistics the given elements that should be contained in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics does not contain all given Statistic elements.
   */
  public S hasAllStatistics(Statistic... allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (allStatistics == null) failWithMessage("Expecting allStatistics parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllStatistics(), allStatistics);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's allStatistics contains the given Statistic elements in Collection.
   * @param allStatistics the given elements that should be contained in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics does not contain all given Statistic elements.
   */
  public S hasAllStatistics(java.util.Collection<? extends Statistic> allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (allStatistics == null) {
      failWithMessage("Expecting allStatistics parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAllStatistics(), allStatistics.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's allStatistics contains <b>only</b> the given Statistic elements and nothing else in whatever order.
   * @param allStatistics the given elements that should be contained in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics does not contain all given Statistic elements.
   */
  public S hasOnlyAllStatistics(Statistic... allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (allStatistics == null) failWithMessage("Expecting allStatistics parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllStatistics(), allStatistics);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's allStatistics contains <b>only</b> the given Statistic elements in Collection and nothing else in whatever order.
   * @param allStatistics the given elements that should be contained in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics does not contain all given Statistic elements.
   */
  public S hasOnlyAllStatistics(java.util.Collection<? extends Statistic> allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (allStatistics == null) {
      failWithMessage("Expecting allStatistics parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAllStatistics(), allStatistics.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's allStatistics does not contain the given Statistic elements.
   *
   * @param allStatistics the given elements that should not be in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics contains any given Statistic elements.
   */
  public S doesNotHaveAllStatistics(Statistic... allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (allStatistics == null) failWithMessage("Expecting allStatistics parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllStatistics(), allStatistics);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's allStatistics does not contain the given Statistic elements in Collection.
   *
   * @param allStatistics the given elements that should not be in actual StatisticService's allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics contains any given Statistic elements.
   */
  public S doesNotHaveAllStatistics(java.util.Collection<? extends Statistic> allStatistics) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (allStatistics == null) {
      failWithMessage("Expecting allStatistics parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAllStatistics(), allStatistics.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService has no allStatistics.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's allStatistics is not empty.
   */
  public S hasNoAllStatistics() {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have allStatistics but had :\n  <%s>";

    // check
    if (actual.getAllStatistics().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAllStatistics());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins contains the given Statistic elements.
   * @param leaderBoardMultiWins the given elements that should be contained in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins does not contain all given Statistic elements.
   */
  public S hasLeaderBoardMultiWins(Statistic... leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardMultiWins == null) failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins contains the given Statistic elements in Collection.
   * @param leaderBoardMultiWins the given elements that should be contained in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins does not contain all given Statistic elements.
   */
  public S hasLeaderBoardMultiWins(java.util.Collection<? extends Statistic> leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardMultiWins == null) {
      failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins contains <b>only</b> the given Statistic elements and nothing else in whatever order.
   * @param leaderBoardMultiWins the given elements that should be contained in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins does not contain all given Statistic elements.
   */
  public S hasOnlyLeaderBoardMultiWins(Statistic... leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardMultiWins == null) failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins contains <b>only</b> the given Statistic elements in Collection and nothing else in whatever order.
   * @param leaderBoardMultiWins the given elements that should be contained in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins does not contain all given Statistic elements.
   */
  public S hasOnlyLeaderBoardMultiWins(java.util.Collection<? extends Statistic> leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardMultiWins == null) {
      failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins does not contain the given Statistic elements.
   *
   * @param leaderBoardMultiWins the given elements that should not be in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins contains any given Statistic elements.
   */
  public S doesNotHaveLeaderBoardMultiWins(Statistic... leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardMultiWins == null) failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardMultiWins does not contain the given Statistic elements in Collection.
   *
   * @param leaderBoardMultiWins the given elements that should not be in actual StatisticService's leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins contains any given Statistic elements.
   */
  public S doesNotHaveLeaderBoardMultiWins(java.util.Collection<? extends Statistic> leaderBoardMultiWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardMultiWins == null) {
      failWithMessage("Expecting leaderBoardMultiWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLeaderBoardMultiWins(), leaderBoardMultiWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService has no leaderBoardMultiWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardMultiWins is not empty.
   */
  public S hasNoLeaderBoardMultiWins() {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have leaderBoardMultiWins but had :\n  <%s>";

    // check
    if (actual.getLeaderBoardMultiWins().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLeaderBoardMultiWins());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins contains the given Statistic elements.
   * @param leaderBoardSingleWins the given elements that should be contained in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins does not contain all given Statistic elements.
   */
  public S hasLeaderBoardSingleWins(Statistic... leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardSingleWins == null) failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins contains the given Statistic elements in Collection.
   * @param leaderBoardSingleWins the given elements that should be contained in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins does not contain all given Statistic elements.
   */
  public S hasLeaderBoardSingleWins(java.util.Collection<? extends Statistic> leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardSingleWins == null) {
      failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins contains <b>only</b> the given Statistic elements and nothing else in whatever order.
   * @param leaderBoardSingleWins the given elements that should be contained in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins does not contain all given Statistic elements.
   */
  public S hasOnlyLeaderBoardSingleWins(Statistic... leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardSingleWins == null) failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins contains <b>only</b> the given Statistic elements in Collection and nothing else in whatever order.
   * @param leaderBoardSingleWins the given elements that should be contained in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins does not contain all given Statistic elements.
   */
  public S hasOnlyLeaderBoardSingleWins(java.util.Collection<? extends Statistic> leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardSingleWins == null) {
      failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins does not contain the given Statistic elements.
   *
   * @param leaderBoardSingleWins the given elements that should not be in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins contains any given Statistic elements.
   */
  public S doesNotHaveLeaderBoardSingleWins(Statistic... leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic varargs is not null.
    if (leaderBoardSingleWins == null) failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService's leaderBoardSingleWins does not contain the given Statistic elements in Collection.
   *
   * @param leaderBoardSingleWins the given elements that should not be in actual StatisticService's leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins contains any given Statistic elements.
   */
  public S doesNotHaveLeaderBoardSingleWins(java.util.Collection<? extends Statistic> leaderBoardSingleWins) {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // check that given Statistic collection is not null.
    if (leaderBoardSingleWins == null) {
      failWithMessage("Expecting leaderBoardSingleWins parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getLeaderBoardSingleWins(), leaderBoardSingleWins.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual StatisticService has no leaderBoardSingleWins.
   * @return this assertion object.
   * @throws AssertionError if the actual StatisticService's leaderBoardSingleWins is not empty.
   */
  public S hasNoLeaderBoardSingleWins() {
    // check that actual StatisticService we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have leaderBoardSingleWins but had :\n  <%s>";

    // check
    if (actual.getLeaderBoardSingleWins().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLeaderBoardSingleWins());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
