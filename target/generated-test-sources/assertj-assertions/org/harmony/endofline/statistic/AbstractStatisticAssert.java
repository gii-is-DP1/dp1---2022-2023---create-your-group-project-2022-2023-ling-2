package org.harmony.endofline.statistic;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Statistic} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractStatisticAssert<S extends AbstractStatisticAssert<S, A>, A extends Statistic> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractStatisticAssert}</code> to make assertions on actual Statistic.
   * @param actual the Statistic we want to make assertions on.
   */
  protected AbstractStatisticAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Statistic's numberGames is equal to the given one.
   * @param numberGames the given numberGames to compare the actual Statistic's numberGames to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's numberGames is not equal to the given one.
   */
  public S hasNumberGames(int numberGames) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberGames of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNumberGames = actual.getNumberGames();
    if (actualNumberGames != numberGames) {
      failWithMessage(assertjErrorMessage, actual, numberGames, actualNumberGames);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistic's numberMultiPlayerLosses is equal to the given one.
   * @param numberMultiPlayerLosses the given numberMultiPlayerLosses to compare the actual Statistic's numberMultiPlayerLosses to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's numberMultiPlayerLosses is not equal to the given one.
   */
  public S hasNumberMultiPlayerLosses(int numberMultiPlayerLosses) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberMultiPlayerLosses of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNumberMultiPlayerLosses = actual.getNumberMultiPlayerLosses();
    if (actualNumberMultiPlayerLosses != numberMultiPlayerLosses) {
      failWithMessage(assertjErrorMessage, actual, numberMultiPlayerLosses, actualNumberMultiPlayerLosses);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistic's numberMultiPlayerWins is equal to the given one.
   * @param numberMultiPlayerWins the given numberMultiPlayerWins to compare the actual Statistic's numberMultiPlayerWins to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's numberMultiPlayerWins is not equal to the given one.
   */
  public S hasNumberMultiPlayerWins(int numberMultiPlayerWins) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberMultiPlayerWins of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNumberMultiPlayerWins = actual.getNumberMultiPlayerWins();
    if (actualNumberMultiPlayerWins != numberMultiPlayerWins) {
      failWithMessage(assertjErrorMessage, actual, numberMultiPlayerWins, actualNumberMultiPlayerWins);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistic's numberSinglePlayerLosses is equal to the given one.
   * @param numberSinglePlayerLosses the given numberSinglePlayerLosses to compare the actual Statistic's numberSinglePlayerLosses to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's numberSinglePlayerLosses is not equal to the given one.
   */
  public S hasNumberSinglePlayerLosses(int numberSinglePlayerLosses) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberSinglePlayerLosses of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNumberSinglePlayerLosses = actual.getNumberSinglePlayerLosses();
    if (actualNumberSinglePlayerLosses != numberSinglePlayerLosses) {
      failWithMessage(assertjErrorMessage, actual, numberSinglePlayerLosses, actualNumberSinglePlayerLosses);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistic's numberSinglePlayerWins is equal to the given one.
   * @param numberSinglePlayerWins the given numberSinglePlayerWins to compare the actual Statistic's numberSinglePlayerWins to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's numberSinglePlayerWins is not equal to the given one.
   */
  public S hasNumberSinglePlayerWins(int numberSinglePlayerWins) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberSinglePlayerWins of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualNumberSinglePlayerWins = actual.getNumberSinglePlayerWins();
    if (actualNumberSinglePlayerWins != numberSinglePlayerWins) {
      failWithMessage(assertjErrorMessage, actual, numberSinglePlayerWins, actualNumberSinglePlayerWins);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistic's user is equal to the given one.
   * @param user the given user to compare the actual Statistic's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistic's user is not equal to the given one.
   */
  public S hasUser(org.harmony.endofline.user.User user) {
    // check that actual Statistic we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.harmony.endofline.user.User actualUser = actual.getUser();
    if (!Objects.areEqual(actualUser, user)) {
      failWithMessage(assertjErrorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
